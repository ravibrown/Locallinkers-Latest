//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LocalLinkersEntities : DbContext
    {
        public LocalLinkersEntities()
            : base("name=LocalLinkersEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_BusinessImages> tbl_BusinessImages { get; set; }
        public virtual DbSet<tbl_Category> tbl_Category { get; set; }
        public virtual DbSet<tbl_Cities> tbl_Cities { get; set; }
        public virtual DbSet<tbl_CouponImages> tbl_CouponImages { get; set; }
        public virtual DbSet<tbl_HomeSlider> tbl_HomeSlider { get; set; }
        public virtual DbSet<tbl_Login> tbl_Login { get; set; }
        public virtual DbSet<tbl_OrderDetailImages> tbl_OrderDetailImages { get; set; }
        public virtual DbSet<tbl_Portfolio> tbl_Portfolio { get; set; }
        public virtual DbSet<tbl_ProductImages> tbl_ProductImages { get; set; }
        public virtual DbSet<tbl_Products> tbl_Products { get; set; }
        public virtual DbSet<tbl_Role> tbl_Role { get; set; }
        public virtual DbSet<tbl_Services> tbl_Services { get; set; }
        public virtual DbSet<tbl_SubCategory> tbl_SubCategory { get; set; }
        public virtual DbSet<tbl_Template> tbl_Template { get; set; }
        public virtual DbSet<tbl_TemplateAboutUs> tbl_TemplateAboutUs { get; set; }
        public virtual DbSet<tbl_TemplateContact> tbl_TemplateContact { get; set; }
        public virtual DbSet<tbl_TemplateSliders> tbl_TemplateSliders { get; set; }
        public virtual DbSet<tbl_UserPoints> tbl_UserPoints { get; set; }
        public virtual DbSet<tbl_BusinessBooking> tbl_BusinessBooking { get; set; }
        public virtual DbSet<tbl_OrderDetails> tbl_OrderDetails { get; set; }
        public virtual DbSet<view_Products> view_Products { get; set; }
        public virtual DbSet<tbl_Business> tbl_Business { get; set; }
        public virtual DbSet<tbl_Coupons> tbl_Coupons { get; set; }
        public virtual DbSet<view_Business> view_Business { get; set; }
        public virtual DbSet<view_Coupons> view_Coupons { get; set; }
        public virtual DbSet<tbl_Orders> tbl_Orders { get; set; }
        public virtual DbSet<tbl_OrderAddress> tbl_OrderAddress { get; set; }
        public virtual DbSet<tbl_Order_Product_Mapping> tbl_Order_Product_Mapping { get; set; }
    
        [DbFunction("LocalLinkersEntities", "Split")]
        public virtual IQueryable<string> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[LocalLinkersEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<view_Products> fn_GetDistance_Products(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> selectedPosition, Nullable<long> distance, string title, Nullable<long> take, Nullable<long> index, string orderBy, string categoryIds, string keyword)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var selectedPositionParameter = selectedPosition.HasValue ?
                new ObjectParameter("SelectedPosition", selectedPosition) :
                new ObjectParameter("SelectedPosition", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<view_Products>("fn_GetDistance_Products", myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, selectedPositionParameter, distanceParameter, titleParameter, takeParameter, indexParameter, orderByParameter, categoryIdsParameter, keywordParameter);
        }
    
        public virtual ObjectResult<view_Products> fn_GetDistance_Products(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> selectedPosition, Nullable<long> distance, string title, Nullable<long> take, Nullable<long> index, string orderBy, string categoryIds, string keyword, MergeOption mergeOption)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var selectedPositionParameter = selectedPosition.HasValue ?
                new ObjectParameter("SelectedPosition", selectedPosition) :
                new ObjectParameter("SelectedPosition", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<view_Products>("fn_GetDistance_Products", mergeOption, myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, selectedPositionParameter, distanceParameter, titleParameter, takeParameter, indexParameter, orderByParameter, categoryIdsParameter, keywordParameter);
        }
    
        public virtual ObjectResult<view_Business> fn_GetDistance_Business(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> distance, string businessName, Nullable<long> take, Nullable<long> index, string orderBy, string subCategoryIds, string keyword, Nullable<long> userId, Nullable<int> checkUserId)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var subCategoryIdsParameter = subCategoryIds != null ?
                new ObjectParameter("SubCategoryIds", subCategoryIds) :
                new ObjectParameter("SubCategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var checkUserIdParameter = checkUserId.HasValue ?
                new ObjectParameter("CheckUserId", checkUserId) :
                new ObjectParameter("CheckUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<view_Business>("fn_GetDistance_Business", myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, distanceParameter, businessNameParameter, takeParameter, indexParameter, orderByParameter, subCategoryIdsParameter, keywordParameter, userIdParameter, checkUserIdParameter);
        }
    
        public virtual ObjectResult<view_Business> fn_GetDistance_Business(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> distance, string businessName, Nullable<long> take, Nullable<long> index, string orderBy, string subCategoryIds, string keyword, Nullable<long> userId, Nullable<int> checkUserId, MergeOption mergeOption)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var subCategoryIdsParameter = subCategoryIds != null ?
                new ObjectParameter("SubCategoryIds", subCategoryIds) :
                new ObjectParameter("SubCategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var checkUserIdParameter = checkUserId.HasValue ?
                new ObjectParameter("CheckUserId", checkUserId) :
                new ObjectParameter("CheckUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<view_Business>("fn_GetDistance_Business", mergeOption, myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, distanceParameter, businessNameParameter, takeParameter, indexParameter, orderByParameter, subCategoryIdsParameter, keywordParameter, userIdParameter, checkUserIdParameter);
        }
    
        public virtual ObjectResult<view_Coupons> fn_GetDistance_Coupons(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> selectedPosition, Nullable<long> distance, string title, Nullable<long> take, Nullable<long> index, string orderBy, string categoryIds, string keyword)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var selectedPositionParameter = selectedPosition.HasValue ?
                new ObjectParameter("SelectedPosition", selectedPosition) :
                new ObjectParameter("SelectedPosition", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<view_Coupons>("fn_GetDistance_Coupons", myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, selectedPositionParameter, distanceParameter, titleParameter, takeParameter, indexParameter, orderByParameter, categoryIdsParameter, keywordParameter);
        }
    
        public virtual ObjectResult<view_Coupons> fn_GetDistance_Coupons(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> selectedPosition, Nullable<long> distance, string title, Nullable<long> take, Nullable<long> index, string orderBy, string categoryIds, string keyword, MergeOption mergeOption)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var selectedPositionParameter = selectedPosition.HasValue ?
                new ObjectParameter("SelectedPosition", selectedPosition) :
                new ObjectParameter("SelectedPosition", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<view_Coupons>("fn_GetDistance_Coupons", mergeOption, myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, selectedPositionParameter, distanceParameter, titleParameter, takeParameter, indexParameter, orderByParameter, categoryIdsParameter, keywordParameter);
        }
    
        public virtual ObjectResult<sp_GetBusinessListingByDistance_Result> sp_GetBusinessListingByDistance(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> distance, string businessName, Nullable<long> take, Nullable<long> index, string orderBy, string subCategoryIds, string keyword, Nullable<long> userId, Nullable<int> checkUserId)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var subCategoryIdsParameter = subCategoryIds != null ?
                new ObjectParameter("SubCategoryIds", subCategoryIds) :
                new ObjectParameter("SubCategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var checkUserIdParameter = checkUserId.HasValue ?
                new ObjectParameter("CheckUserId", checkUserId) :
                new ObjectParameter("CheckUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBusinessListingByDistance_Result>("sp_GetBusinessListingByDistance", myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, distanceParameter, businessNameParameter, takeParameter, indexParameter, orderByParameter, subCategoryIdsParameter, keywordParameter, userIdParameter, checkUserIdParameter);
        }
    
        public virtual ObjectResult<sp_GetCouponListingByDistance_Result> sp_GetCouponListingByDistance(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> selectedPosition, Nullable<long> distance, string title, Nullable<long> take, Nullable<long> index, string orderBy, string categoryIds, string keyword)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var selectedPositionParameter = selectedPosition.HasValue ?
                new ObjectParameter("SelectedPosition", selectedPosition) :
                new ObjectParameter("SelectedPosition", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCouponListingByDistance_Result>("sp_GetCouponListingByDistance", myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, selectedPositionParameter, distanceParameter, titleParameter, takeParameter, indexParameter, orderByParameter, categoryIdsParameter, keywordParameter);
        }
    
        public virtual ObjectResult<sp_GetProductListingByDistance_Result> sp_GetProductListingByDistance(Nullable<double> myLat, Nullable<double> myLong, Nullable<long> id, Nullable<bool> isDeleted, Nullable<long> isApproved, Nullable<long> categoryId, Nullable<long> subCategoryId, Nullable<long> selectedCity, Nullable<long> selectedPosition, Nullable<long> distance, string title, Nullable<long> take, Nullable<long> index, string orderBy, string categoryIds, string keyword)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("MyLat", myLat) :
                new ObjectParameter("MyLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("MyLong", myLong) :
                new ObjectParameter("MyLong", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(long));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(long));
    
            var selectedCityParameter = selectedCity.HasValue ?
                new ObjectParameter("SelectedCity", selectedCity) :
                new ObjectParameter("SelectedCity", typeof(long));
    
            var selectedPositionParameter = selectedPosition.HasValue ?
                new ObjectParameter("SelectedPosition", selectedPosition) :
                new ObjectParameter("SelectedPosition", typeof(long));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(long));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductListingByDistance_Result>("sp_GetProductListingByDistance", myLatParameter, myLongParameter, idParameter, isDeletedParameter, isApprovedParameter, categoryIdParameter, subCategoryIdParameter, selectedCityParameter, selectedPositionParameter, distanceParameter, titleParameter, takeParameter, indexParameter, orderByParameter, categoryIdsParameter, keywordParameter);
        }
    
        public virtual ObjectResult<sp_GetCouponListingByMultiPolygon_Result1> sp_GetCouponListingByMultiPolygon(string multiPolygon)
        {
            var multiPolygonParameter = multiPolygon != null ?
                new ObjectParameter("MultiPolygon", multiPolygon) :
                new ObjectParameter("MultiPolygon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCouponListingByMultiPolygon_Result1>("sp_GetCouponListingByMultiPolygon", multiPolygonParameter);
        }
    }
}
